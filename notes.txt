15th Oct 2025
=============

    -> Python 

        -> Full Stack : Django (Python for Apps, Flask, FAST API etc)

        -> Data Analytics / Data Science / AI (Numpy, Pandas, Pytorch etc)

        -> Cloud & DevOps (OS, Sys, Cloud SDK's etc)

    -> Core Python which is common for all above courses (30-35 Days)

        -> Language Fundamentals 

    ->  Python is a high-level, general-purpose programming language. 
        Its design philosophy emphasizes code readability 
        with the use of significant indentation. 
        Python is dynamically type-checked and garbage-collected.

    -> High-level programming language

        -> Human Understandable language (English) 

        -> python (English) 

    -> Low-level programming languages

        -> Machine Understandable language (01010101) [Binary Language]

        -> 01110000 01111001 01110100 01101000 01101111 01101110 

    -> General-purpose programming language

        -> If i can do multiple type of tasks / apps 

        -> python (we can build various types of applications)

            -> Desktop Applications 

            -> Web Applications 

            -> Data Oriented Applications

            -> etc 

    -> Domain Specific programming languages

        -> If i can do only one specific type of tasks / apps 

        -> SQL Structured Query Language is a domain-specific language 
            used to manage data.

    -> Python's design philosophy emphasizes code readability 
        with the use of significant indentation

        -> Readability is good because of indentation

        -> Indentation 

            -> other languages => () ; etc 
            -> python language => space

        -> Readability & Indentation

            -> Java 
            
                class Main {
                    public static void main(String[] args) {  
                        int first = 10;
                        int second = 20;
                        int sum = first + second;
                        System.out.println(sum);
                    }
                }

            -> Python 

                first = 10
                second = 20
                sum = first + second
                print(sum)

    -> Python is dynamically type-checked and garbage-collected.

        -> Dynamically type-checked language (python)

            -> Data Types : Categorization of data 

                -> text, whole numbers, decimal numbers etc 

            -> In Dynamically type-checked language we don't need to define data types 

                -> product = "Apple Iphone 15"
                -> price = 50000
                -> quantity_left = 5
                -> rating = 4.6

        -> Static type-checked language (java)

            -> In Static type-checked language we need to define data types for sure

                -> String product = "Apple Iphone 15";
                -> double price = 50000;
                -> int quantityLeft = 5;
                -> double rating = 4.6;

    -> Garbage-collected

        -> Removing Unused Data 

        -> Python automatically cleans up the unused data / memory 

            -> print(product)
            -> print(price)
            -> print(rating)

            -> python cleans up quantity_left as it's not used 

16th Oct 2025
=============

    -> Python is a Interpreted language 

        -> An interpreted language is a programming language that executes 
        instructions directly, "line by line", without a separate compilation step.

        -> Performance wise Interpreted language are slow compared to Compiled language. 

    -> Java is a Compiled Language

        -> Compiled languages are translated into machine code all at once before execution.

        -> Performance wise Compiled languages are Faster 

    -> Python 

        -> Python is considered as worlds best PROTO TYPE LANGUAGE

            -> Focus on how fast we are developing the application

        -> Vast Eco System (libraries)

    -> Programming Paradigms 

        -> A programming paradigm is a relatively high-level way to 
            conceptualize and structure the implementation of a computer program.

        -> Problem : How to reach institute ?

            -> Ans 1 : I'll walk and come
            -> Ans 2 : I'll come by bike
            -> Ans 3 : I'll come by car
            -> Ans 4 : I'll come by public transport bus 

        -> Imperative Approach 

            -> Focus is on HOW TO DO (style) 

            -> Object Oriented Programming 

        -> Declarative Approach 

            -> Focus is on WHAT TO DO (style) 

            -> Functional Programming 

        -> Python allows you to go with multi paradigm 

    
    -> Key Features Of Python / Why Python ?

        -> Simplicity & Easy Readability 

        -> Versatility  

            -> Data Oriented / Full Stack / Cloud Automation / DevOps etc 

        -> Multi paradigm Programming Language (OOPS / FUNCTIONAL)

        -> Dynamic Typed 

        -> Open Source (FREE)

        -> High Level Language (no 0101001 => just english like)


        -> List Of Popular Applications Where Python is used 

            ->  https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites   


    -> Requirements for this course 

        -> Hardware 

            -> i3 / i5 processor 

            -> 4 GB RAM / 8 GB RAM 

            -> 500 GB HDD / SSD 
        
        -> Software 

            -> Install Python Interpreter (https://python.org)

                -> In Windows (python)

                -> In Mac (python3)

            -> IDE : Integrated Development Environment 

                -> Visual Studio Code 

            -> Git (OPTIONAL) : Code Tracking 


21st Oct 2025
=============

    -> Python Setup 

        -> open command prompt (windows)

            -> python --version (windows)

        -> open terminal (mac)

            -> python3 --version (mac)

    -> IDE - Visual Studio Code Setup 

    
    -> Where to write python code 

        -> Command Line Mode (not recommended)

            -> We write the code in command prompt / terminal 

            -> Temporary, once we close the session all code is gone 

        -> Script Mode (recommended)

            -> We write the code in IDE i.e Visual Studio Code 

            -> Permanent, stored on disk 

    
    -> How To write python code ?

        -> Any programming language has Syntax (Rules & Guideline)

        -> Comparing programming language with english language

            -> i taking class now today at 7 AM now (incorrect)

            -> i'm taking class today at 7 AM (correct)

            -> Learning English 

                -> English has 26 alphabets (abcde.....z)

                -> Using this alphabets, you will form words and complex sentences over time 

            -> Learning Python 

                -> Python has Keywords like alphabets in english

                    -> Python has 35 Keywords

                -> Using python Keywords with proper syntax, you can build application over time 

                -> List Of Python Keywords

                    -> https://docs.python.org/3/reference/lexical_analysis.html#keywords
                
                    False      await      else       import     pass
                    None       break      except     in         raise
                    True       class      finally    is         return
                    and        continue   for        lambda     try
                    as         def        from       nonlocal   while
                    assert     del        global     not        with
                    async      elif       if         or         yield

22nd Oct 2025
=============    

    -> Python rules 

        -> Comments are represented using # 

            -> when we comment using #, python will ignore that line

        -> When working with numerics (1,2,3.5 etc) we can directly use them in print()

        -> When working with text, in python text is called as "strings"

            -> Rule is strings need to be enclosed in 'good morning' or "good morning"

    -> Identifiers 

        -> An identifier is a "name" used to uniquely identify a piece of data

            -> Variable
            -> Function
            -> Class
            -> Object 
            -> Method 
            -> etc

        -> Identifiers Rules 

            -> Can Contain 

                -> Letters (a-z, A-Z)
                -> Digits (0-9)
                -> Special Symbol (Only Underscore _ )

            -> Must Start with 

                -> A letter or _ (Underscore)  

    -> NOTE : Always use proper way of naming identifiers 


    -> Data : Hard Drive - Persistent Storage (Permanent) - SLOW

    -> Data : Memory (RAM) - Non-Persistent Storage (Temporary) - FAST

    -> Variables 

        -> Variable is a named storage location in a computer's memory (RAM)
            that holds a value or data

        -> Computer -> Memory RAM  -> Variables

        -> How to store data / using variable, but how ?

            -> Syntax 

                variable_name = value 

                variable_name should follow Identifier Rules 
                = is called as assignment operator 
                value is data you want to store 
        
        -> Variables allows you to 

            -> Assign Data (Storing Data)
            -> Retrieve Data 
            -> Manipulate Data (If Required)